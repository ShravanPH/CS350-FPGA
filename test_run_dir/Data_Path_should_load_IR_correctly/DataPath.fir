;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DataPath : 
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip opSel : UInt<2>, flip in_a : UInt<16>, flip in_b : UInt<16>, out : UInt<16>}
    
    node _T = eq(io.opSel, UInt<2>("h00")) @[ALU.scala 36:14]
    when _T : @[ALU.scala 36:24]
      node _io_out_T = add(io.in_a, io.in_b) @[ALU.scala 37:21]
      node _io_out_T_1 = tail(_io_out_T, 1) @[ALU.scala 37:21]
      io.out <= _io_out_T_1 @[ALU.scala 37:10]
      skip @[ALU.scala 36:24]
    else : @[ALU.scala 38:32]
      node _T_1 = eq(io.opSel, UInt<2>("h01")) @[ALU.scala 38:22]
      when _T_1 : @[ALU.scala 38:32]
        node _io_out_T_2 = and(io.in_a, io.in_b) @[ALU.scala 39:21]
        io.out <= _io_out_T_2 @[ALU.scala 39:10]
        skip @[ALU.scala 38:32]
      else : @[ALU.scala 40:32]
        node _T_2 = eq(io.opSel, UInt<2>("h02")) @[ALU.scala 40:22]
        when _T_2 : @[ALU.scala 40:32]
          node _io_out_T_3 = not(io.in_a) @[ALU.scala 41:13]
          io.out <= _io_out_T_3 @[ALU.scala 41:10]
          skip @[ALU.scala 40:32]
        else : @[ALU.scala 42:34]
          node _T_3 = eq(io.opSel, UInt<2>("h03")) @[ALU.scala 42:22]
          when _T_3 : @[ALU.scala 42:34]
            io.out <= io.in_a @[ALU.scala 43:10]
            skip @[ALU.scala 42:34]
          else : @[ALU.scala 44:14]
            io.out <= UInt<1>("h00") @[ALU.scala 45:9]
            skip @[ALU.scala 44:14]
    
  module RegFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip wEn : UInt<1>, flip sr1Sel : UInt<3>, flip sr2Sel : UInt<3>, flip drSel : UInt<3>, flip drIn : UInt<16>, sr1Out : UInt<16>, sr2Out : UInt<16>, debugR0 : UInt<16>, debugR1 : UInt<16>, debugR2 : UInt<16>, debugR3 : UInt<16>, debugR4 : UInt<16>, debugR5 : UInt<16>, debugR6 : UInt<16>, debugR7 : UInt<16>}
    
    wire _regs_WIRE : UInt<16>[8] @[RegFile.scala 34:29]
    _regs_WIRE[0] <= UInt<16>("h00") @[RegFile.scala 34:29]
    _regs_WIRE[1] <= UInt<16>("h00") @[RegFile.scala 34:29]
    _regs_WIRE[2] <= UInt<16>("h00") @[RegFile.scala 34:29]
    _regs_WIRE[3] <= UInt<16>("h00") @[RegFile.scala 34:29]
    _regs_WIRE[4] <= UInt<16>("h00") @[RegFile.scala 34:29]
    _regs_WIRE[5] <= UInt<16>("h00") @[RegFile.scala 34:29]
    _regs_WIRE[6] <= UInt<16>("h00") @[RegFile.scala 34:29]
    _regs_WIRE[7] <= UInt<16>("h00") @[RegFile.scala 34:29]
    reg regs : UInt<16>[8], clock with : (reset => (reset, _regs_WIRE)) @[RegFile.scala 34:21]
    node _T = eq(io.wEn, UInt<1>("h01")) @[RegFile.scala 43:14]
    when _T : @[RegFile.scala 43:24]
      regs[io.drSel] <= io.drIn @[RegFile.scala 44:19]
      io.sr1Out <= regs[io.sr1Sel] @[RegFile.scala 45:14]
      io.sr2Out <= regs[io.sr2Sel] @[RegFile.scala 46:14]
      skip @[RegFile.scala 43:24]
    else : @[RegFile.scala 47:14]
      io.sr1Out <= regs[io.sr1Sel] @[RegFile.scala 48:12]
      io.sr2Out <= regs[io.sr2Sel] @[RegFile.scala 49:12]
      skip @[RegFile.scala 47:14]
    io.debugR0 <= regs[0] @[RegFile.scala 86:14]
    io.debugR1 <= regs[1] @[RegFile.scala 87:14]
    io.debugR2 <= regs[2] @[RegFile.scala 88:14]
    io.debugR3 <= regs[3] @[RegFile.scala 89:14]
    io.debugR4 <= regs[4] @[RegFile.scala 90:14]
    io.debugR5 <= regs[5] @[RegFile.scala 91:14]
    io.debugR6 <= regs[6] @[RegFile.scala 92:14]
    io.debugR7 <= regs[7] @[RegFile.scala 93:14]
    
  module Bus : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputSel : UInt<8>, flip inputs : UInt<16>[8], output : UInt<16>}
    
    node _oneHotMux_T = bits(io.inputSel, 0, 0) @[Bus.scala 29:16]
    node _oneHotMux_T_1 = bits(io.inputSel, 1, 1) @[Bus.scala 30:16]
    node _oneHotMux_T_2 = bits(io.inputSel, 2, 2) @[Bus.scala 31:16]
    node _oneHotMux_T_3 = bits(io.inputSel, 3, 3) @[Bus.scala 32:16]
    node _oneHotMux_T_4 = bits(io.inputSel, 4, 4) @[Bus.scala 33:16]
    node _oneHotMux_T_5 = bits(io.inputSel, 5, 5) @[Bus.scala 34:16]
    node _oneHotMux_T_6 = bits(io.inputSel, 6, 6) @[Bus.scala 35:16]
    node _oneHotMux_T_7 = bits(io.inputSel, 7, 7) @[Bus.scala 36:16]
    node _oneHotMux_T_8 = mux(_oneHotMux_T, io.inputs[0], UInt<1>("h00")) @[Mux.scala 27:72]
    node _oneHotMux_T_9 = mux(_oneHotMux_T_1, io.inputs[1], UInt<1>("h00")) @[Mux.scala 27:72]
    node _oneHotMux_T_10 = mux(_oneHotMux_T_2, io.inputs[2], UInt<1>("h00")) @[Mux.scala 27:72]
    node _oneHotMux_T_11 = mux(_oneHotMux_T_3, io.inputs[3], UInt<1>("h00")) @[Mux.scala 27:72]
    node _oneHotMux_T_12 = mux(_oneHotMux_T_4, io.inputs[4], UInt<1>("h00")) @[Mux.scala 27:72]
    node _oneHotMux_T_13 = mux(_oneHotMux_T_5, io.inputs[5], UInt<1>("h00")) @[Mux.scala 27:72]
    node _oneHotMux_T_14 = mux(_oneHotMux_T_6, io.inputs[6], UInt<1>("h00")) @[Mux.scala 27:72]
    node _oneHotMux_T_15 = mux(_oneHotMux_T_7, io.inputs[7], UInt<1>("h00")) @[Mux.scala 27:72]
    node _oneHotMux_T_16 = or(_oneHotMux_T_8, _oneHotMux_T_9) @[Mux.scala 27:72]
    node _oneHotMux_T_17 = or(_oneHotMux_T_16, _oneHotMux_T_10) @[Mux.scala 27:72]
    node _oneHotMux_T_18 = or(_oneHotMux_T_17, _oneHotMux_T_11) @[Mux.scala 27:72]
    node _oneHotMux_T_19 = or(_oneHotMux_T_18, _oneHotMux_T_12) @[Mux.scala 27:72]
    node _oneHotMux_T_20 = or(_oneHotMux_T_19, _oneHotMux_T_13) @[Mux.scala 27:72]
    node _oneHotMux_T_21 = or(_oneHotMux_T_20, _oneHotMux_T_14) @[Mux.scala 27:72]
    node _oneHotMux_T_22 = or(_oneHotMux_T_21, _oneHotMux_T_15) @[Mux.scala 27:72]
    wire oneHotMux : UInt<16> @[Mux.scala 27:72]
    oneHotMux <= _oneHotMux_T_22 @[Mux.scala 27:72]
    io.output <= oneHotMux @[Bus.scala 39:13]
    
  module DataPath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip intPriority : UInt<3>, flip ctrlSigs : {LDMAR : UInt<1>, LDMDR : UInt<1>, LDIR : UInt<1>, LDBEN : UInt<1>, LDREG : UInt<1>, LDCC : UInt<1>, LDPC : UInt<1>, LDPriv : UInt<1>, LDSavedSSP : UInt<1>, LDSavedUSP : UInt<1>, LDVector : UInt<1>, LDPriority : UInt<1>, LDACV : UInt<1>, GatePC : UInt<1>, GateMDR : UInt<1>, GateALU : UInt<1>, GateMARMUX : UInt<1>, GateVector : UInt<1>, GatePCm1 : UInt<1>, GatePSR : UInt<1>, GateSP : UInt<1>, PCMUX : UInt<2>, DRMUX : UInt<2>, SR1MUX : UInt<2>, ADDR1MUX : UInt<1>, ADDR2MUX : UInt<2>, SPMUX : UInt<2>, MARMUX : UInt<1>, TableMUX : UInt<1>, VectorMUX : UInt<2>, PSRMUX : UInt<1>, ALUK : UInt<2>, MIOEN : UInt<1>, RW : UInt<1>, SetPriv : UInt<1>}, flip mdrVal : UInt<16>, flip devIntEnable : UInt<1>, flip intHandlerAddr : UInt<16>, flip resetVec : UInt<16>, ir : UInt<16>, bus : UInt<16>, psr15 : UInt<1>, n : UInt<1>, z : UInt<1>, p : UInt<1>, bEn : UInt<1>, ACV : UInt<1>, irq : UInt<1>, debugPC : UInt<16>, debugIR : UInt<16>, debugPSR : UInt<16>, debugR0 : UInt<16>, debugR1 : UInt<16>, debugR2 : UInt<16>, debugR3 : UInt<16>, debugR4 : UInt<16>, debugR5 : UInt<16>, debugR6 : UInt<16>, debugR7 : UInt<16>}
    
    reg ACV : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DataPath.scala 59:20]
    reg BEN : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DataPath.scala 60:20]
    reg IR : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[DataPath.scala 62:20]
    wire _PSR_WIRE : {priv : UInt<1>, unused1 : UInt<4>, priority : UInt<3>, unused2 : UInt<5>, cc : UInt<3>} @[DataPath.scala 63:33]
    _PSR_WIRE.cc <= UInt<3>("h02") @[DataPath.scala 63:33]
    _PSR_WIRE.unused2 <= UInt<5>("h00") @[DataPath.scala 63:33]
    _PSR_WIRE.priority <= UInt<3>("h00") @[DataPath.scala 63:33]
    _PSR_WIRE.unused1 <= UInt<4>("h00") @[DataPath.scala 63:33]
    _PSR_WIRE.priv <= UInt<1>("h00") @[DataPath.scala 63:33]
    reg PSR : {priv : UInt<1>, unused1 : UInt<4>, priority : UInt<3>, unused2 : UInt<5>, cc : UInt<3>}, clock with : (reset => (reset, _PSR_WIRE)) @[DataPath.scala 63:20]
    reg PC : UInt, clock with : (reset => (reset, io.resetVec)) @[DataPath.scala 65:20]
    node N = bits(PSR.cc, 2, 2) @[DataPath.scala 67:17]
    node Z = bits(PSR.cc, 1, 1) @[DataPath.scala 68:17]
    node P = bits(PSR.cc, 0, 0) @[DataPath.scala 69:17]
    reg SavedSSP : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[DataPath.scala 71:25]
    reg SavedUSP : UInt<16>, clock with : (reset => (reset, UInt<16>("h0fdff"))) @[DataPath.scala 72:25]
    inst ALU of ALU @[DataPath.scala 74:20]
    ALU.clock <= clock
    ALU.reset <= reset
    inst regs of RegFile @[DataPath.scala 75:20]
    regs.clock <= clock
    regs.reset <= reset
    reg aGbReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DataPath.scala 78:23]
    io.ir <= IR @[DataPath.scala 81:12]
    io.psr15 <= PSR.priv @[DataPath.scala 82:12]
    io.n <= N @[DataPath.scala 83:12]
    io.z <= Z @[DataPath.scala 84:12]
    io.p <= P @[DataPath.scala 85:12]
    io.bEn <= BEN @[DataPath.scala 86:12]
    io.ACV <= ACV @[DataPath.scala 87:12]
    inst bus of Bus @[DataPath.scala 90:22]
    bus.clock <= clock
    bus.reset <= reset
    io.bus <= bus.io.output @[DataPath.scala 93:10]
    node bus_io_inputSel_lo_lo = cat(io.ctrlSigs.GatePSR, io.ctrlSigs.GateSP) @[Cat.scala 30:58]
    node bus_io_inputSel_lo_hi = cat(io.ctrlSigs.GateVector, io.ctrlSigs.GatePCm1) @[Cat.scala 30:58]
    node bus_io_inputSel_lo = cat(bus_io_inputSel_lo_hi, bus_io_inputSel_lo_lo) @[Cat.scala 30:58]
    node bus_io_inputSel_hi_lo = cat(io.ctrlSigs.GateALU, io.ctrlSigs.GateMARMUX) @[Cat.scala 30:58]
    node bus_io_inputSel_hi_hi = cat(io.ctrlSigs.GatePC, io.ctrlSigs.GateMDR) @[Cat.scala 30:58]
    node bus_io_inputSel_hi = cat(bus_io_inputSel_hi_hi, bus_io_inputSel_hi_lo) @[Cat.scala 30:58]
    node _bus_io_inputSel_T = cat(bus_io_inputSel_hi, bus_io_inputSel_lo) @[Cat.scala 30:58]
    bus.io.inputSel <= _bus_io_inputSel_T @[DataPath.scala 97:19]
    wire MARMUX : UInt<16> @[DataPath.scala 109:20]
    wire SPMUX : UInt<16> @[DataPath.scala 110:20]
    bus.io.inputs[7] <= PC @[DataPath.scala 114:20]
    bus.io.inputs[6] <= io.mdrVal @[DataPath.scala 115:20]
    bus.io.inputs[5] <= ALU.io.out @[DataPath.scala 116:20]
    bus.io.inputs[4] <= MARMUX @[DataPath.scala 117:20]
    bus.io.inputs[3] <= io.intHandlerAddr @[DataPath.scala 118:20]
    node _bus_io_inputs_2_T = sub(PC, UInt<1>("h01")) @[DataPath.scala 119:26]
    node _bus_io_inputs_2_T_1 = tail(_bus_io_inputs_2_T, 1) @[DataPath.scala 119:26]
    bus.io.inputs[2] <= _bus_io_inputs_2_T_1 @[DataPath.scala 119:20]
    node bus_io_inputs_1_lo = cat(PSR.unused2, PSR.cc) @[DataPath.scala 120:33]
    node bus_io_inputs_1_hi_hi = cat(PSR.priv, PSR.unused1) @[DataPath.scala 120:33]
    node bus_io_inputs_1_hi = cat(bus_io_inputs_1_hi_hi, PSR.priority) @[DataPath.scala 120:33]
    node _bus_io_inputs_1_T = cat(bus_io_inputs_1_hi, bus_io_inputs_1_lo) @[DataPath.scala 120:33]
    bus.io.inputs[1] <= _bus_io_inputs_1_T @[DataPath.scala 120:20]
    bus.io.inputs[0] <= SPMUX @[DataPath.scala 121:20]
    node ADDR1MUX = mux(io.ctrlSigs.ADDR1MUX, regs.io.sr1Out, PC) @[DataPath.scala 129:21]
    node ADDR2MUX_hi = mux(UInt<1>("h00"), UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 72:12]
    node _ADDR2MUX_T = cat(ADDR2MUX_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node ADDR2MUX_hi_1 = mux(UInt<1>("h00"), UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 72:12]
    node _ADDR2MUX_T_1 = cat(ADDR2MUX_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
    node ADDR2MUX_lo = bits(IR, 5, 0) @[DataPath.scala 137:20]
    node ADDR2MUX_signBit = bits(ADDR2MUX_lo, 5, 5) @[Utils.scala 9:20]
    node _ADDR2MUX_T_2 = bits(ADDR2MUX_signBit, 0, 0) @[Bitwise.scala 72:15]
    node ADDR2MUX_hi_2 = mux(_ADDR2MUX_T_2, UInt<10>("h03ff"), UInt<10>("h00")) @[Bitwise.scala 72:12]
    node _ADDR2MUX_T_3 = cat(ADDR2MUX_hi_2, ADDR2MUX_lo) @[Cat.scala 30:58]
    node ADDR2MUX_lo_1 = bits(IR, 8, 0) @[DataPath.scala 138:20]
    node ADDR2MUX_signBit_1 = bits(ADDR2MUX_lo_1, 8, 8) @[Utils.scala 9:20]
    node _ADDR2MUX_T_4 = bits(ADDR2MUX_signBit_1, 0, 0) @[Bitwise.scala 72:15]
    node ADDR2MUX_hi_3 = mux(_ADDR2MUX_T_4, UInt<7>("h07f"), UInt<7>("h00")) @[Bitwise.scala 72:12]
    node _ADDR2MUX_T_5 = cat(ADDR2MUX_hi_3, ADDR2MUX_lo_1) @[Cat.scala 30:58]
    node ADDR2MUX_lo_2 = bits(IR, 10, 0) @[DataPath.scala 139:20]
    node ADDR2MUX_signBit_2 = bits(ADDR2MUX_lo_2, 10, 10) @[Utils.scala 9:20]
    node _ADDR2MUX_T_6 = bits(ADDR2MUX_signBit_2, 0, 0) @[Bitwise.scala 72:15]
    node ADDR2MUX_hi_4 = mux(_ADDR2MUX_T_6, UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
    node _ADDR2MUX_T_7 = cat(ADDR2MUX_hi_4, ADDR2MUX_lo_2) @[Cat.scala 30:58]
    node _ADDR2MUX_T_8 = eq(UInt<1>("h01"), io.ctrlSigs.ADDR2MUX) @[Mux.scala 80:60]
    node _ADDR2MUX_T_9 = mux(_ADDR2MUX_T_8, _ADDR2MUX_T_3, _ADDR2MUX_T_1) @[Mux.scala 80:57]
    node _ADDR2MUX_T_10 = eq(UInt<2>("h02"), io.ctrlSigs.ADDR2MUX) @[Mux.scala 80:60]
    node _ADDR2MUX_T_11 = mux(_ADDR2MUX_T_10, _ADDR2MUX_T_5, _ADDR2MUX_T_9) @[Mux.scala 80:57]
    node _ADDR2MUX_T_12 = eq(UInt<2>("h03"), io.ctrlSigs.ADDR2MUX) @[Mux.scala 80:60]
    node ADDR2MUX = mux(_ADDR2MUX_T_12, _ADDR2MUX_T_7, _ADDR2MUX_T_11) @[Mux.scala 80:57]
    node _addrCalc_T = add(ADDR1MUX, ADDR2MUX) @[DataPath.scala 144:27]
    node addrCalc = tail(_addrCalc_T, 1) @[DataPath.scala 144:27]
    node _PCMUX_T = add(PC, UInt<1>("h01")) @[DataPath.scala 146:41]
    node _PCMUX_T_1 = tail(_PCMUX_T, 1) @[DataPath.scala 146:41]
    node _PCMUX_T_2 = add(PC, UInt<1>("h01")) @[DataPath.scala 147:16]
    node _PCMUX_T_3 = tail(_PCMUX_T_2, 1) @[DataPath.scala 147:16]
    node _PCMUX_T_4 = eq(UInt<1>("h00"), io.ctrlSigs.PCMUX) @[Mux.scala 80:60]
    node _PCMUX_T_5 = mux(_PCMUX_T_4, _PCMUX_T_3, _PCMUX_T_1) @[Mux.scala 80:57]
    node _PCMUX_T_6 = eq(UInt<1>("h01"), io.ctrlSigs.PCMUX) @[Mux.scala 80:60]
    node _PCMUX_T_7 = mux(_PCMUX_T_6, addrCalc, _PCMUX_T_5) @[Mux.scala 80:57]
    node _PCMUX_T_8 = eq(UInt<2>("h02"), io.ctrlSigs.PCMUX) @[Mux.scala 80:60]
    node PCMUX = mux(_PCMUX_T_8, bus.io.output, _PCMUX_T_7) @[Mux.scala 80:57]
    node _SPMUX_T = add(regs.io.sr1Out, UInt<1>("h01")) @[DataPath.scala 153:28]
    node _SPMUX_T_1 = tail(_SPMUX_T, 1) @[DataPath.scala 153:28]
    node _SPMUX_T_2 = sub(regs.io.sr1Out, UInt<1>("h01")) @[DataPath.scala 154:28]
    node _SPMUX_T_3 = tail(_SPMUX_T_2, 1) @[DataPath.scala 154:28]
    node _SPMUX_T_4 = eq(UInt<1>("h01"), io.ctrlSigs.SPMUX) @[Mux.scala 80:60]
    node _SPMUX_T_5 = mux(_SPMUX_T_4, _SPMUX_T_3, _SPMUX_T_1) @[Mux.scala 80:57]
    node _SPMUX_T_6 = eq(UInt<2>("h02"), io.ctrlSigs.SPMUX) @[Mux.scala 80:60]
    node _SPMUX_T_7 = mux(_SPMUX_T_6, SavedSSP, _SPMUX_T_5) @[Mux.scala 80:57]
    node _SPMUX_T_8 = eq(UInt<2>("h03"), io.ctrlSigs.SPMUX) @[Mux.scala 80:60]
    node _SPMUX_T_9 = mux(_SPMUX_T_8, SavedUSP, _SPMUX_T_7) @[Mux.scala 80:57]
    SPMUX <= _SPMUX_T_9 @[DataPath.scala 152:9]
    node MARMUX_lo = bits(IR, 7, 0) @[DataPath.scala 160:49]
    node _MARMUX_T = cat(UInt<8>("h00"), MARMUX_lo) @[Cat.scala 30:58]
    node _MARMUX_T_1 = mux(io.ctrlSigs.MARMUX, addrCalc, _MARMUX_T) @[DataPath.scala 160:15]
    MARMUX <= _MARMUX_T_1 @[DataPath.scala 160:9]
    node _DRMUX_T = bits(IR, 11, 9) @[DataPath.scala 164:39]
    node _DRMUX_T_1 = bits(IR, 11, 9) @[DataPath.scala 165:14]
    node _DRMUX_T_2 = eq(UInt<1>("h00"), io.ctrlSigs.DRMUX) @[Mux.scala 80:60]
    node _DRMUX_T_3 = mux(_DRMUX_T_2, _DRMUX_T_1, _DRMUX_T) @[Mux.scala 80:57]
    node _DRMUX_T_4 = eq(UInt<1>("h01"), io.ctrlSigs.DRMUX) @[Mux.scala 80:60]
    node _DRMUX_T_5 = mux(_DRMUX_T_4, UInt<3>("h07"), _DRMUX_T_3) @[Mux.scala 80:57]
    node _DRMUX_T_6 = eq(UInt<2>("h02"), io.ctrlSigs.DRMUX) @[Mux.scala 80:60]
    node DRMUX = mux(_DRMUX_T_6, UInt<3>("h06"), _DRMUX_T_5) @[Mux.scala 80:57]
    node _SR1MUX_T = bits(IR, 11, 9) @[DataPath.scala 170:41]
    node _SR1MUX_T_1 = bits(IR, 11, 9) @[DataPath.scala 171:14]
    node _SR1MUX_T_2 = bits(IR, 8, 6) @[DataPath.scala 172:14]
    node _SR1MUX_T_3 = eq(UInt<1>("h00"), io.ctrlSigs.SR1MUX) @[Mux.scala 80:60]
    node _SR1MUX_T_4 = mux(_SR1MUX_T_3, _SR1MUX_T_1, _SR1MUX_T) @[Mux.scala 80:57]
    node _SR1MUX_T_5 = eq(UInt<1>("h01"), io.ctrlSigs.SR1MUX) @[Mux.scala 80:60]
    node _SR1MUX_T_6 = mux(_SR1MUX_T_5, _SR1MUX_T_2, _SR1MUX_T_4) @[Mux.scala 80:57]
    node _SR1MUX_T_7 = eq(UInt<2>("h02"), io.ctrlSigs.SR1MUX) @[Mux.scala 80:60]
    node SR1MUX = mux(_SR1MUX_T_7, UInt<3>("h06"), _SR1MUX_T_6) @[Mux.scala 80:57]
    node _SR2MUX_T = bits(IR, 5, 5) @[DataPath.scala 181:22]
    node SR2MUX_lo = bits(IR, 4, 0) @[DataPath.scala 181:37]
    node SR2MUX_signBit = bits(SR2MUX_lo, 4, 4) @[Utils.scala 9:20]
    node _SR2MUX_T_1 = bits(SR2MUX_signBit, 0, 0) @[Bitwise.scala 72:15]
    node SR2MUX_hi = mux(_SR2MUX_T_1, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _SR2MUX_T_2 = cat(SR2MUX_hi, SR2MUX_lo) @[Cat.scala 30:58]
    node SR2MUX = mux(_SR2MUX_T, _SR2MUX_T_2, regs.io.sr2Out) @[DataPath.scala 181:19]
    node newN = bits(bus.io.output, 15, 15) @[DataPath.scala 184:23]
    node _newZ_T = orr(bus.io.output) @[DataPath.scala 185:28]
    node newZ = not(_newZ_T) @[DataPath.scala 185:17]
    node _newP_T = not(newN) @[DataPath.scala 186:17]
    node _newP_T_1 = not(newZ) @[DataPath.scala 186:25]
    node newP = and(_newP_T, _newP_T_1) @[DataPath.scala 186:23]
    node ccLogic_hi = cat(newN, newZ) @[Cat.scala 30:58]
    node ccLogic = cat(ccLogic_hi, newP) @[Cat.scala 30:58]
    node _CCMUX_T = bits(bus.io.output, 2, 0) @[DataPath.scala 192:47]
    node CCMUX = mux(io.ctrlSigs.PSRMUX, ccLogic, _CCMUX_T) @[DataPath.scala 192:18]
    node _PRIVMUX_T = bits(bus.io.output, 15, 15) @[DataPath.scala 196:54]
    node PRIVMUX = mux(io.ctrlSigs.PSRMUX, io.ctrlSigs.SetPriv, _PRIVMUX_T) @[DataPath.scala 196:20]
    node _PRIOMUX_T = bits(bus.io.output, 10, 8) @[DataPath.scala 201:56]
    node PRIOMUX = mux(io.ctrlSigs.PSRMUX, io.intPriority, _PRIOMUX_T) @[DataPath.scala 201:20]
    when io.ctrlSigs.LDIR : @[DataPath.scala 212:20]
      IR <= io.bus @[DataPath.scala 213:9]
      skip @[DataPath.scala 212:20]
    when io.ctrlSigs.LDPC : @[DataPath.scala 217:21]
      PC <= PCMUX @[DataPath.scala 218:9]
      skip @[DataPath.scala 217:21]
    when io.ctrlSigs.LDPriv : @[DataPath.scala 221:23]
      PSR.priv <= PRIVMUX @[DataPath.scala 222:15]
      skip @[DataPath.scala 221:23]
    when io.ctrlSigs.LDPriority : @[DataPath.scala 225:27]
      PSR.priority <= PRIOMUX @[DataPath.scala 226:19]
      skip @[DataPath.scala 225:27]
    when io.ctrlSigs.LDCC : @[DataPath.scala 229:21]
      PSR.cc <= CCMUX @[DataPath.scala 230:13]
      skip @[DataPath.scala 229:21]
    when io.ctrlSigs.LDSavedSSP : @[DataPath.scala 233:27]
      SavedSSP <= regs.io.sr1Out @[DataPath.scala 234:15]
      skip @[DataPath.scala 233:27]
    when io.ctrlSigs.LDSavedUSP : @[DataPath.scala 237:27]
      SavedUSP <= regs.io.sr1Out @[DataPath.scala 238:15]
      skip @[DataPath.scala 237:27]
    when io.ctrlSigs.LDBEN : @[DataPath.scala 242:22]
      node _BEN_T = bits(IR, 11, 11) @[DataPath.scala 243:16]
      node _BEN_T_1 = and(_BEN_T, N) @[DataPath.scala 243:21]
      node _BEN_T_2 = bits(IR, 10, 10) @[DataPath.scala 244:16]
      node _BEN_T_3 = and(_BEN_T_2, Z) @[DataPath.scala 244:21]
      node _BEN_T_4 = or(_BEN_T_1, _BEN_T_3) @[DataPath.scala 243:26]
      node _BEN_T_5 = bits(IR, 9, 9) @[DataPath.scala 245:16]
      node _BEN_T_6 = and(_BEN_T_5, P) @[DataPath.scala 245:21]
      node _BEN_T_7 = or(_BEN_T_4, _BEN_T_6) @[DataPath.scala 244:26]
      BEN <= _BEN_T_7 @[DataPath.scala 243:10]
      skip @[DataPath.scala 242:22]
    when io.ctrlSigs.LDACV : @[DataPath.scala 253:22]
      node _busOr_T = bits(bus.io.output, 15, 9) @[DataPath.scala 254:24]
      node _busOr_T_1 = andr(_busOr_T) @[DataPath.scala 254:35]
      node _busOr_T_2 = bits(bus.io.output, 15, 12) @[DataPath.scala 255:24]
      node _busOr_T_3 = lt(_busOr_T_2, UInt<2>("h03")) @[DataPath.scala 255:41]
      node busOr = or(_busOr_T_1, _busOr_T_3) @[DataPath.scala 254:38]
      node _ACV_T = and(busOr, PSR.priv) @[DataPath.scala 256:19]
      ACV <= _ACV_T @[DataPath.scala 256:10]
      skip @[DataPath.scala 253:22]
    node _T = gt(io.intPriority, PSR.priority) @[DataPath.scala 259:25]
    when _T : @[DataPath.scala 259:41]
      aGbReg <= UInt<1>("h01") @[DataPath.scala 260:13]
      skip @[DataPath.scala 259:41]
    node _io_irq_T = and(aGbReg, io.devIntEnable) @[DataPath.scala 264:24]
    io.irq <= _io_irq_T @[DataPath.scala 264:14]
    ALU.io.in_a <= regs.io.sr1Out @[DataPath.scala 269:16]
    ALU.io.in_b <= SR2MUX @[DataPath.scala 270:16]
    ALU.io.opSel <= io.ctrlSigs.ALUK @[DataPath.scala 271:16]
    regs.io.wEn <= io.ctrlSigs.LDREG @[DataPath.scala 274:18]
    regs.io.drSel <= DRMUX @[DataPath.scala 275:18]
    regs.io.drIn <= bus.io.output @[DataPath.scala 276:18]
    regs.io.sr1Sel <= SR1MUX @[DataPath.scala 277:18]
    node _regs_io_sr2Sel_T = bits(IR, 2, 0) @[DataPath.scala 278:23]
    regs.io.sr2Sel <= _regs_io_sr2Sel_T @[DataPath.scala 278:18]
    io.debugPC <= PC @[DataPath.scala 282:15]
    io.debugIR <= IR @[DataPath.scala 283:15]
    node io_debugPSR_lo = cat(PSR.unused2, PSR.cc) @[DataPath.scala 284:28]
    node io_debugPSR_hi_hi = cat(PSR.priv, PSR.unused1) @[DataPath.scala 284:28]
    node io_debugPSR_hi = cat(io_debugPSR_hi_hi, PSR.priority) @[DataPath.scala 284:28]
    node _io_debugPSR_T = cat(io_debugPSR_hi, io_debugPSR_lo) @[DataPath.scala 284:28]
    io.debugPSR <= _io_debugPSR_T @[DataPath.scala 284:15]
    io.debugR0 <= regs.io.debugR0 @[DataPath.scala 285:15]
    io.debugR1 <= regs.io.debugR1 @[DataPath.scala 286:15]
    io.debugR2 <= regs.io.debugR2 @[DataPath.scala 287:15]
    io.debugR3 <= regs.io.debugR3 @[DataPath.scala 288:15]
    io.debugR4 <= regs.io.debugR4 @[DataPath.scala 289:15]
    io.debugR5 <= regs.io.debugR5 @[DataPath.scala 290:15]
    io.debugR6 <= regs.io.debugR6 @[DataPath.scala 291:15]
    io.debugR7 <= regs.io.debugR7 @[DataPath.scala 292:15]
    
