;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit MemCtrl : 
  module AddrCtrl : 
    input clock : Clock
    input reset : Reset
    output io : {flip MAR : UInt<16>, flip MIOEN : UInt<1>, flip RW : UInt<1>, MEMEN : UInt<1>, INMUX_SEL : UInt<2>, LDKBSR : UInt<1>, LDDSR : UInt<1>, LDDDR : UInt<1>, LDMCR : UInt<1>, kbsrRead : UInt<1>}
    
    io.INMUX_SEL is invalid @[AddrCtrl.scala 49:16]
    io.MEMEN <= UInt<1>("h00") @[AddrCtrl.scala 50:16]
    io.LDKBSR <= UInt<1>("h00") @[AddrCtrl.scala 51:16]
    io.LDDSR <= UInt<1>("h00") @[AddrCtrl.scala 52:16]
    io.LDDDR <= UInt<1>("h00") @[AddrCtrl.scala 53:16]
    io.LDMCR <= UInt<1>("h00") @[AddrCtrl.scala 54:16]
    io.kbsrRead <= UInt<1>("h00") @[AddrCtrl.scala 56:15]
    when io.MIOEN : @[AddrCtrl.scala 58:19]
      node _T = eq(io.MAR, UInt<16>("h0fe00")) @[AddrCtrl.scala 60:18]
      when _T : @[AddrCtrl.scala 60:33]
        when io.RW : @[AddrCtrl.scala 61:20]
          io.LDKBSR <= UInt<1>("h01") @[AddrCtrl.scala 62:19]
          skip @[AddrCtrl.scala 61:20]
        else : @[AddrCtrl.scala 63:22]
          io.INMUX_SEL <= UInt<2>("h02") @[AddrCtrl.scala 64:24]
          io.kbsrRead <= UInt<1>("h01") @[AddrCtrl.scala 65:23]
          skip @[AddrCtrl.scala 63:22]
        skip @[AddrCtrl.scala 60:33]
      else : @[AddrCtrl.scala 68:40]
        node _T_1 = eq(io.MAR, UInt<16>("h0fe02")) @[AddrCtrl.scala 68:25]
        when _T_1 : @[AddrCtrl.scala 68:40]
          node _T_2 = eq(io.RW, UInt<1>("h00")) @[AddrCtrl.scala 69:19]
          when _T_2 : @[AddrCtrl.scala 69:32]
            io.INMUX_SEL <= UInt<2>("h03") @[AddrCtrl.scala 70:22]
            skip @[AddrCtrl.scala 69:32]
          skip @[AddrCtrl.scala 68:40]
        else : @[AddrCtrl.scala 73:40]
          node _T_3 = eq(io.MAR, UInt<16>("h0fe04")) @[AddrCtrl.scala 73:25]
          when _T_3 : @[AddrCtrl.scala 73:40]
            when io.RW : @[AddrCtrl.scala 74:20]
              io.LDDSR <= UInt<1>("h01") @[AddrCtrl.scala 75:18]
              skip @[AddrCtrl.scala 74:20]
            else : @[AddrCtrl.scala 76:20]
              io.INMUX_SEL <= UInt<1>("h01") @[AddrCtrl.scala 77:22]
              skip @[AddrCtrl.scala 76:20]
            skip @[AddrCtrl.scala 73:40]
          else : @[AddrCtrl.scala 80:40]
            node _T_4 = eq(io.MAR, UInt<16>("h0fe06")) @[AddrCtrl.scala 80:25]
            when _T_4 : @[AddrCtrl.scala 80:40]
              when io.RW : @[AddrCtrl.scala 81:20]
                io.LDDDR <= UInt<1>("h01") @[AddrCtrl.scala 82:18]
                skip @[AddrCtrl.scala 81:20]
              skip @[AddrCtrl.scala 80:40]
            else : @[AddrCtrl.scala 85:40]
              node _T_5 = eq(io.MAR, UInt<16>("h0fffe")) @[AddrCtrl.scala 85:25]
              when _T_5 : @[AddrCtrl.scala 85:40]
                when io.RW : @[AddrCtrl.scala 86:20]
                  io.LDMCR <= UInt<1>("h01") @[AddrCtrl.scala 87:18]
                  skip @[AddrCtrl.scala 86:20]
                else : @[AddrCtrl.scala 88:20]
                  io.INMUX_SEL <= UInt<3>("h04") @[AddrCtrl.scala 89:22]
                  skip @[AddrCtrl.scala 88:20]
                skip @[AddrCtrl.scala 85:40]
              else : @[AddrCtrl.scala 92:18]
                io.MEMEN <= UInt<1>("h01") @[AddrCtrl.scala 93:16]
                node _T_6 = eq(io.RW, UInt<1>("h00")) @[AddrCtrl.scala 94:19]
                when _T_6 : @[AddrCtrl.scala 94:32]
                  io.INMUX_SEL <= UInt<1>("h00") @[AddrCtrl.scala 95:22]
                  skip @[AddrCtrl.scala 94:32]
                skip @[AddrCtrl.scala 92:18]
      skip @[AddrCtrl.scala 58:19]
    
  module MemCtrl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memR : UInt<1>, flip memData : UInt<16>, flip LDMDR : UInt<1>, flip MIOEN : UInt<1>, flip LDMAR : UInt<1>, flip RDWR : UInt<1>, flip bus : UInt<16>, flip devReady : UInt<1>, flip devData : UInt<16>, mdrOut : UInt<16>, devIntEnable : UInt<1>, mcrOut : UInt<16>, R : UInt<1>, en : UInt<1>, wEn : UInt<1>, dataIn : UInt<16>, addr : UInt<16>, tx : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, debugMDR : UInt<16>, debugMAR : UInt<16>, debugDSR : UInt<16>, debugDDR : UInt<16>, debugMCR : UInt<16>}
    
    reg MDR : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[MemCtrl.scala 74:20]
    reg MAR : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[MemCtrl.scala 75:20]
    inst addrCtrl of AddrCtrl @[MemCtrl.scala 77:24]
    addrCtrl.clock <= clock
    addrCtrl.reset <= reset
    reg DSR : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[MemCtrl.scala 80:20]
    reg DDR : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[MemCtrl.scala 81:20]
    wire _KBSR_WIRE : {ready : UInt<1>, int_en : UInt<1>, unused : UInt<14>} @[MemCtrl.scala 84:34]
    _KBSR_WIRE.unused <= UInt<14>("h00") @[MemCtrl.scala 84:34]
    _KBSR_WIRE.int_en <= UInt<1>("h00") @[MemCtrl.scala 84:34]
    _KBSR_WIRE.ready <= UInt<1>("h00") @[MemCtrl.scala 84:34]
    reg KBSR : {ready : UInt<1>, int_en : UInt<1>, unused : UInt<14>}, clock with : (reset => (reset, _KBSR_WIRE)) @[MemCtrl.scala 84:21]
    reg KBDR : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[MemCtrl.scala 85:21]
    node _MCR_T = cat(UInt<1>("h01"), UInt<15>("h00")) @[Cat.scala 30:58]
    reg MCR : UInt, clock with : (reset => (reset, _MCR_T)) @[MemCtrl.scala 87:20]
    node _io_devIntEnable_T = and(KBSR.int_en, KBSR.ready) @[MemCtrl.scala 99:34]
    io.devIntEnable <= _io_devIntEnable_T @[MemCtrl.scala 99:19]
    node _DSR_T = cat(io.tx.ready, UInt<15>("h00")) @[Cat.scala 30:58]
    DSR <= _DSR_T @[MemCtrl.scala 102:7]
    reg io_tx_valid_REG : UInt<1>, clock @[MemCtrl.scala 103:25]
    io_tx_valid_REG <= addrCtrl.io.LDDDR @[MemCtrl.scala 103:25]
    io.tx.valid <= io_tx_valid_REG @[MemCtrl.scala 103:15]
    node _io_tx_bits_T = bits(DDR, 7, 0) @[MemCtrl.scala 104:21]
    io.tx.bits <= _io_tx_bits_T @[MemCtrl.scala 104:15]
    io.mdrOut <= MDR @[MemCtrl.scala 107:13]
    io.mcrOut <= MCR @[MemCtrl.scala 110:13]
    addrCtrl.io.MAR <= MAR @[MemCtrl.scala 113:21]
    addrCtrl.io.MIOEN <= io.MIOEN @[MemCtrl.scala 114:21]
    addrCtrl.io.RW <= io.RDWR @[MemCtrl.scala 115:21]
    io.en <= addrCtrl.io.MEMEN @[MemCtrl.scala 118:13]
    io.wEn <= io.RDWR @[MemCtrl.scala 119:13]
    io.dataIn <= MDR @[MemCtrl.scala 120:13]
    io.addr <= MAR @[MemCtrl.scala 121:13]
    node _io_R_T = eq(UInt<1>("h01"), addrCtrl.io.INMUX_SEL) @[Mux.scala 80:60]
    node _io_R_T_1 = mux(_io_R_T, UInt<1>("h01"), UInt<1>("h01")) @[Mux.scala 80:57]
    node _io_R_T_2 = eq(UInt<2>("h02"), addrCtrl.io.INMUX_SEL) @[Mux.scala 80:60]
    node _io_R_T_3 = mux(_io_R_T_2, UInt<1>("h01"), _io_R_T_1) @[Mux.scala 80:57]
    node _io_R_T_4 = eq(UInt<2>("h03"), addrCtrl.io.INMUX_SEL) @[Mux.scala 80:60]
    node _io_R_T_5 = mux(_io_R_T_4, UInt<1>("h01"), _io_R_T_3) @[Mux.scala 80:57]
    node _io_R_T_6 = eq(UInt<3>("h04"), addrCtrl.io.INMUX_SEL) @[Mux.scala 80:60]
    node _io_R_T_7 = mux(_io_R_T_6, UInt<1>("h01"), _io_R_T_5) @[Mux.scala 80:57]
    io.R <= _io_R_T_7 @[MemCtrl.scala 123:8]
    node INMUX_hi = cat(KBSR.ready, KBSR.int_en) @[MemCtrl.scala 142:23]
    node _INMUX_T = cat(INMUX_hi, KBSR.unused) @[MemCtrl.scala 142:23]
    node _INMUX_T_1 = eq(UInt<1>("h01"), addrCtrl.io.INMUX_SEL) @[Mux.scala 80:60]
    node _INMUX_T_2 = mux(_INMUX_T_1, DSR, io.memData) @[Mux.scala 80:57]
    node _INMUX_T_3 = eq(UInt<2>("h02"), addrCtrl.io.INMUX_SEL) @[Mux.scala 80:60]
    node _INMUX_T_4 = mux(_INMUX_T_3, _INMUX_T, _INMUX_T_2) @[Mux.scala 80:57]
    node _INMUX_T_5 = eq(UInt<2>("h03"), addrCtrl.io.INMUX_SEL) @[Mux.scala 80:60]
    node _INMUX_T_6 = mux(_INMUX_T_5, KBDR, _INMUX_T_4) @[Mux.scala 80:57]
    node _INMUX_T_7 = eq(UInt<3>("h04"), addrCtrl.io.INMUX_SEL) @[Mux.scala 80:60]
    node INMUX = mux(_INMUX_T_7, MCR, _INMUX_T_6) @[Mux.scala 80:57]
    node MDRMUX = mux(io.MIOEN, INMUX, io.bus) @[MemCtrl.scala 151:19]
    when io.LDMAR : @[MemCtrl.scala 155:17]
      MAR <= io.bus @[MemCtrl.scala 156:8]
      skip @[MemCtrl.scala 155:17]
    when io.LDMDR : @[MemCtrl.scala 159:17]
      MDR <= MDRMUX @[MemCtrl.scala 160:7]
      skip @[MemCtrl.scala 159:17]
    when addrCtrl.io.LDKBSR : @[MemCtrl.scala 163:17]
      wire _KBSR_WIRE_1 : {ready : UInt<1>, int_en : UInt<1>, unused : UInt<14>} @[MemCtrl.scala 164:25]
      wire _KBSR_WIRE_2 : UInt<16>
      _KBSR_WIRE_2 <= MDR
      node _KBSR_T = bits(_KBSR_WIRE_2, 13, 0) @[MemCtrl.scala 164:25]
      _KBSR_WIRE_1.unused <= _KBSR_T @[MemCtrl.scala 164:25]
      node _KBSR_T_1 = bits(_KBSR_WIRE_2, 14, 14) @[MemCtrl.scala 164:25]
      _KBSR_WIRE_1.int_en <= _KBSR_T_1 @[MemCtrl.scala 164:25]
      node _KBSR_T_2 = bits(_KBSR_WIRE_2, 15, 15) @[MemCtrl.scala 164:25]
      _KBSR_WIRE_1.ready <= _KBSR_T_2 @[MemCtrl.scala 164:25]
      KBSR.unused <= _KBSR_WIRE_1.unused @[MemCtrl.scala 164:10]
      KBSR.int_en <= _KBSR_WIRE_1.int_en @[MemCtrl.scala 164:10]
      KBSR.ready <= _KBSR_WIRE_1.ready @[MemCtrl.scala 164:10]
      skip @[MemCtrl.scala 163:17]
    KBSR.ready <= io.devReady @[MemCtrl.scala 167:14]
    when addrCtrl.io.LDDSR : @[MemCtrl.scala 169:16]
      DSR <= MDR @[MemCtrl.scala 170:9]
      skip @[MemCtrl.scala 169:16]
    when addrCtrl.io.LDDDR : @[MemCtrl.scala 173:16]
      DDR <= MDR @[MemCtrl.scala 174:9]
      skip @[MemCtrl.scala 173:16]
    when addrCtrl.io.LDMCR : @[MemCtrl.scala 177:16]
      MCR <= MDR @[MemCtrl.scala 178:9]
      skip @[MemCtrl.scala 177:16]
    KBDR <= io.devData @[MemCtrl.scala 181:8]
    io.debugMDR <= MDR @[MemCtrl.scala 184:15]
    io.debugMAR <= MAR @[MemCtrl.scala 185:15]
    io.debugDDR <= DDR @[MemCtrl.scala 186:15]
    io.debugDSR <= DSR @[MemCtrl.scala 187:15]
    io.debugMCR <= MCR @[MemCtrl.scala 188:15]
    
